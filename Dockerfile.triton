# Starting from NVIDIA PyTorch NGC Container
# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch
FROM nvcr.io/nvidia/tritonserver:23.09-py3

# install some useful tools
RUN \
    export DEBIAN_FRONTEND=noninteractive \
    && apt-get update -y -q \
    && apt-get install -y software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update -y -q \
    && apt-get install -y \
    aptitude \
    autoconf \
    autogen \
    automake \
    bash-completion \
    bison \
    build-essential \
    cmake \
    dnsutils \
    elinks \
    emacs-nox emacs-goodies-el \
    fish \
    flex \
    git \
    htop \
    iperf3 \
    iproute2 \
    iputils-ping \
    less \
    libboost-all-dev \
    libopencv-dev \
    libtool \
    mc \
    nload \
    nmon \
    psutils \
    python3 \
    python3-pip \
    rapidjson-dev \
    source-highlight \
    ssh \
    sudo \
    tmux \
    unzip \
    vim \
    wget \
    zip \
    && rm -rf /var/lib/apt/lists/*

# upgrade pip
RUN pip3 install -U pip

WORKDIR /opt

# CMake
RUN CMAKE_VERSION=3.18 && \
    CMAKE_BUILD=3.18.6 && \
    wget -nv https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz && \
    tar -xf cmake-${CMAKE_BUILD}.tar.gz && \
    cd cmake-${CMAKE_BUILD} && \
    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) -- -DCMAKE_USE_OPENSSL=OFF && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /cmake-${CMAKE_BUILD}

# Miniconda
ENV PATH="/opt/conda/bin:${PATH}"
RUN MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-py38_4.12.0-Linux-x86_64.sh"; \
    SHA256SUM="3190da6626f86eee8abf1b2fd7a5af492994eb2667357ee4243975cdbb175d7a"; \
    wget "${MINICONDA_URL}" -O miniconda.sh -q && \
    echo "${SHA256SUM} miniconda.sh" > shasum && \
    sha256sum -c ./shasum && \
    sh miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh shasum && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy


RUN git clone --recursive https://github.com/triton-inference-server/dali_backend.git /dali
WORKDIR /dali

# use dali nightly build?
ARG DALI_DOWNLOAD_EXTRA_INDEX_URL=https://developer.download.nvidia.com/compute/redist/nightly
ARG DALI_DOWNLOAD_PKG_NAME=nvidia-dali-nightly-cuda120
ARG DALI_DOWNLOAD_VERSION=1.32.0.dev20231016
ARG DALI_DOWNLOAD_EXTRA_OPTIONS

ARG TRITON_BACKEND_API_VERSION="r22.07"
RUN set -ex && mkdir build_in_ci && cd build_in_ci &&                                 \
    cmake                                                                             \
      -D CMAKE_INSTALL_PREFIX=/opt/tritonserver                                       \
      -D CMAKE_BUILD_TYPE=Release                                                     \
      -D TRITON_BACKEND_API_VERSION=${TRITON_BACKEND_API_VERSION}                     \
      ${DALI_DOWNLOAD_PKG_NAME:+                                                      \
        -D DALI_DOWNLOAD_PKG_NAME=${DALI_DOWNLOAD_PKG_NAME}}                          \
      ${DALI_DOWNLOAD_EXTRA_INDEX_URL:+                                               \
        -D DALI_EXTRA_INDEX_URL=${DALI_DOWNLOAD_EXTRA_INDEX_URL}}                     \
      -D DALI_VERSION=${DALI_DOWNLOAD_VERSION}                                        \
      -D DALI_DOWNLOAD_EXTRA_OPTIONS="${DALI_DOWNLOAD_EXTRA_OPTIONS}"                 \
      .. &&                                                                           \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install

ENV LD_LIBRARY_PATH=/opt/tritonserver/lib:${LD_LIBRARY_PATH}


########################################################################
# Cassandra C++ and Python drivers
########################################################################

# install cassandra C++ driver
RUN \
    export DEBIAN_FRONTEND=noninteractive \
    && apt-get update -y -q \
    && apt-get install -y libuv1-dev libssl-dev \
    && rm -rf /var/lib/apt/lists/* 

ARG CASS_DRIVER_VER=2.16.2
RUN \
    wget -nv "https://github.com/datastax/cpp-driver/archive/$CASS_DRIVER_VER.tar.gz" \
    && tar xfz $CASS_DRIVER_VER.tar.gz \
    && cd cpp-driver-$CASS_DRIVER_VER \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make -j \
    && make install


#install cassandra python driver + torch + other python libraries
RUN \
    pip3 install --upgrade --no-cache matplotlib pandas clize \
      opencv-python cassandra-driver pybind11 tqdm tifffile pyyaml torch

########################################################################
# install plugin and run as user
########################################################################
# Fix for error given by "from nvidia.dali.plugin.pytorch import DALIGenericIterator"
# - https://forums.developer.nvidia.com/t/issues-building-docker-image-from-ngc-container-nvcr-io-nvidia-pytorch-22-py3/209034
ENV PATH="${PATH}:/opt/hpcx/ompi/bin"
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/hpcx/ompi/lib:/opt/hpcx/ucx/lib:/opt/hpcx/ucc/lib"
# Install jdk
RUN \
    export DEBIAN_FRONTEND=noninteractive \
    && apt-get update -y -q \
    && apt-get install -y openjdk-11-jdk

########################################################################
# Cassandra server installation, to test examples
########################################################################
ARG CASS_V=4.1
RUN \
    export CASS_VERS=$(curl 'https://downloads.apache.org/cassandra/' | grep -o "$CASS_V\.[[:digit:]]\+" | tail -n 1) \
    && cd /tmp && wget -nv "https://downloads.apache.org/cassandra/$CASS_VERS/apache-cassandra-$CASS_VERS-bin.tar.gz" \
    && cd / && tar xfz "/tmp/apache-cassandra-$CASS_VERS-bin.tar.gz" \
    && ln -s "apache-cassandra-$CASS_VERS" cassandra

EXPOSE 9042

########################################################################
# Download the Imagenette dataset
########################################################################
WORKDIR /tmp
RUN \
    wget -nv 'https://s3.amazonaws.com/fast-ai-imageclas/imagenette2-320.tgz' \
    && tar xfz 'imagenette2-320.tgz' \
    && rm 'imagenette2-320.tgz'

RUN \
    usermod -aG sudo -s /usr/bin/fish triton-server \
    && sed -i 's/ALL$/NOPASSWD:ALL/' /etc/sudoers \
    && chown -R triton-server:triton-server /apache-cassandra-$CASS_V*

COPY . /home/triton-server/cassandra-dali-plugin

RUN chown -R triton-server:triton-server '/home/triton-server/'

# increase write timeout to 20 seconds, listen to all interfaces,
# enable SSL and increase max direct memory available
RUN \
    cp /home/triton-server/cassandra-dali-plugin/varia/keystore /cassandra/conf/ \
    && python3 /home/triton-server/cassandra-dali-plugin/varia/edit_cassandra_conf.py

# install cassandra dali plugin
WORKDIR /home/triton-server/cassandra-dali-plugin
# install dali in base conda environments
# RUN pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist --upgrade nvidia-dali-cuda120==1.30
RUN pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist/nightly \
    --upgrade nvidia-dali-nightly-cuda120==$DALI_DOWNLOAD_VERSION

# install cassandra-dali plugin
ENV CONDA_DALI_LIB /opt/conda/lib
RUN pip3 install .
# install cassandra-dali plugin in dalienv
RUN rm -Rf build \
    && /opt/tritonserver/backends/dali/conda/envs/dalienv/bin/python3 -m pip install .
# install triton client
RUN pip3 install tritonclient[all] IPython

WORKDIR /home/triton-server/cassandra-dali-plugin/examples/triton
USER triton-server
RUN /opt/conda/bin/conda init fish
